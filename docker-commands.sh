#!/bin/bash
# CapiAgentes - Comandos Docker Esenciales
# UN COMANDO POR CASO DE USO

if [ $# -eq 0 ]; then
    echo "‚ùå Uso: ./docker-commands.sh [start|stop|restart|rebuild|logs|status|clean]"
    exit 1
fi

COMPOSE_ARGS=("-f" "docker-compose.yml")
OBSERVABILITY_FILE="$(dirname "$0")/observability/docker-compose.elastic.yml"
if [ -f "$OBSERVABILITY_FILE" ]; then
    COMPOSE_ARGS+=("-f" "$OBSERVABILITY_FILE")
fi

invoke_compose() {
    docker compose "${COMPOSE_ARGS[@]}" "$@"
}

case $1 in
    start)
        echo "üöÄ INICIANDO CapiAgentes (completo)..."
        invoke_compose up -d
        sleep 10
        echo "‚úÖ ACCESO: Frontend http://localhost:3000 | Backend http://localhost:8000"
        ;;

    stop)
        echo "üõë PARANDO CapiAgentes..."
        invoke_compose down
        echo "‚úÖ DETENIDO: Todos los servicios parados"
        ;;

    restart)
        echo "üîÑ REINICIANDO CapiAgentes..."
        invoke_compose down
        invoke_compose up -d
        sleep 10
        echo "‚úÖ REINICIADO: http://localhost:3000"
        ;;

    rebuild)
        echo "üèóÔ∏è RECONSTRUYENDO CapiAgentes (desde cero)..."
        invoke_compose down
        invoke_compose build --no-cache
        invoke_compose up -d
        sleep 15
        echo "‚úÖ RECONSTRUIDO: http://localhost:3000"
        ;;

    logs)
        echo "üìã MOSTRANDO logs en tiempo real..."
        invoke_compose logs -f
        ;;

    status)
        echo "üìä ESTADO de servicios:"
        invoke_compose ps
        echo ""
        echo "üîç HEALTH CHECK:"
        curl -s http://localhost:8000/api/health || echo "‚ùå Backend no disponible"
        ;;

    clean)
        echo "üßπ LIMPIEZA COMPLETA (eliminando todo)..."
        invoke_compose down -v --remove-orphans
        docker system prune -f
        echo "‚úÖ LIMPIO: Todo eliminado"
        ;;

    *)
        echo "‚ùå Comando inv√°lido. Usa: start|stop|restart|rebuild|logs|status|clean"
        exit 1
        ;;
esac
