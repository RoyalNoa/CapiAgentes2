input {
  beats {
    port => 5044
  }
  http {
    port => 8080
  }
  file {
    path => "/app/logs/graph_layout_diagnostics.jsonl"
    codec => json
    start_position => "beginning"
    sincedb_path => "/tmp/sincedb_graph_layout"
    tags => ["graph_layout"]
  }
  file {
    path => "/app/backend_logs/backend.log"
    codec => plain { charset => "UTF-8" }
    start_position => "beginning"
    sincedb_path => "/tmp/sincedb_backend"
    tags => ["backend_log"]
  }
  file {
    path => "/app/logs/front.log"
    codec => plain { charset => "UTF-8" }
    start_position => "beginning"
    sincedb_path => "/tmp/sincedb_front"
    tags => ["frontend_log"]
  }
  file {
    path => "/app/backend_logs/agent_metrics*.jsonl"
    codec => json
    start_position => "beginning"
    sincedb_path => "/tmp/sincedb_agent_metrics"
    tags => ["agent_metrics"]
  }
}

filter {
  if "agent_metrics" in [tags] {
    mutate {
      add_field => { "service" => "agent_metrics" }
    }

    if [timestamp] {
      date {
        match => ["timestamp", "ISO8601"]
        target => "@timestamp"
      }
    }

    if ![@timestamp] {
      ruby {
        code => "event.set('@timestamp', LogStash::Timestamp.now)"
      }
    }

  } else if "backend_log" in [tags] {
    dissect {
      mapping => {
        "message" => "[%{log_timestamp}] [%{log_origin}] [%{log_level}] [%{log_logger}] %{log_body}"
      }
      remove_field => ["message"]
    }

    mutate {
      add_field => { "service" => "backend" }
      rename => {
        "log_logger" => "logger"
        "log_origin" => "origin"
        "log_level" => "level"
      }
    }

    date {
      match => ["log_timestamp", "YYYY-MM-dd HH:mm:ss"]
      target => "@timestamp"
    }

    ruby {
      code => '
        body = event.get("log_body")
        return unless body.is_a?(String)
        if (idx = body.index(" | "))
          message = body[0, idx]
          context = body[(idx + 3)..-1]
          event.set("message", message.strip)
          event.set("log_context_raw", context.strip) if context
        else
          event.set("message", body.strip)
        end
      '
    }

    if [log_context_raw] {
      kv {
        source => "log_context_raw"
        target => "context"
        field_split => " "
        value_split => "="
      }
      mutate {
        remove_field => ["log_context_raw"]
      }
    }

    mutate {
      remove_field => ["log_body", "log_timestamp"]
    }
  } else if "frontend_log" in [tags] {
    dissect {
      mapping => {
        "message" => "[%{log_timestamp}] [%{log_origin}] [%{log_level}] %{log_body}"
      }
      remove_field => ["message"]
    }

    mutate {
      add_field => { "service" => "frontend" }
      rename => {
        "log_origin" => "origin"
        "log_level" => "level"
      }
    }

    date {
      match => ["log_timestamp", "ISO8601"]
      target => "@timestamp"
    }

    ruby {
      init => 'require "json"'
      code => '
        body = event.get("log_body")
        return unless body.is_a?(String)
        trimmed = body.strip
        message = trimmed
        if trimmed.end_with?("}") && (start = trimmed.rindex(" {"))
          context_str = trimmed[(start + 1)..-1]
          begin
            context = JSON.parse(context_str)
            event.set("context", context)
            message = trimmed[0...start].rstrip
          rescue JSON::ParserError
            event.set("context_raw", context_str)
          end
        end
        event.set("message", message)
      '
    }

    mutate {
      remove_field => ["log_body", "log_timestamp"]
    }
  }

  if [message] and !("backend_log" in [tags]) and !("frontend_log" in [tags]) and !("agent_metrics" in [tags]) {
    json {
      source => "message"
      skip_on_invalid_json => true
      target => "json"
    }

    if [json][service] {
      mutate {
        add_field => { "service" => "%{[json][service]}" }
      }
    }
  }
}

output {
  if "agent_metrics" in [tags] {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "agent-metrics-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  } else {
    elasticsearch {
      hosts => ["http://elasticsearch:9200"]
      index => "capi-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }

  stdout {
    codec => rubydebug
  }
}
